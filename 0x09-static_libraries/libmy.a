!<arch>
0-isupper.c/    0           0     0     644     206       `
#include "main.h"

/**
 * _isupper - check if character is uppercase
 * @c: character to check
 *
 * Return: 1 if c is uppercase,
 * 0 otherwise.
 */
int _isupper(int c)
{
	return (c >= 'A' && c <= 'Z');
}
0-memset.c/     0           0     0     644     342       `
#include "main.h"

/**
 * _memset - fill memory with a constant byte
 * @s: a pointer to a memory area
 * @b: the byte to write to memory
 * @n: the number of bytes to write
 *
 * Return: a pointer to the memory area s
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; ++i)
		s[i] = b;
	return (s);
}
0-strcat.c/     0           0     0     644     411       `
#include "main.h"

/**
 *_strcat - concatenates two strings
 *@dest: pointer for the first string we want to change
 *@src: pointer  for the second string
 *
 *Return: the new string
 */
char *_strcat(char *dest, char *src)
{
	int longdest;
	int j;

	for (longdest = 0; dest[longdest] != '\0'; longdest++)
	{
	}
	for (j = 0; src[j] != '\0'; j++)
	{
		dest[longdest] = src[j];
		longdest++;
	}
	return (dest);
}

1-isdigit.c/    0           0     0     644     202       `
#include "main.h"

/**
 * _isdigit - check if character is a digit
 * @c: character to check
 *
 * Return: 1 if c is a digit,
 * 0 otherwise.
 */
int _isdigit(int c)
{
	return (c >= '0' && c <= '9');
}
1-memcpy.c/     0           0     0     644     502       `
#include "main.h"

/**
 * _memcpy - copy a memory area
 * @dest: a pointer to the start of the target area
 * @src: a pointer to the start of the source area
 * @n: the number of bytes to copy
 *
 * Description: This function copies n bytes from memory area src to memory
 * area dest. The memory areas must not overlap.
 *
 * Return: a pointer to dest
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i = 0;

	for (i = 0; i < n; ++i, ++src)
		dest[i] = *src;
	return (dest);
}
1-strncat.c/    0           0     0     644     489       `
#include "main.h"

/**
 *_strncat - concatenates two strings
 *@dest: pointer for the first string we want to change
 *@src: pointer  for the second string
 *@n: number of bytes
 *
 *Return: the new string with n bytes
 */
char *_strncat(char *dest, char *src, int n)
{
	int longdest;
	int j;

	for (longdest = 0; dest[longdest] != '\0'; longdest++)
	{
	}

	for (j = 0; j < n && src[j] != '\0'; j++)
	{
		dest[longdest] = src[j];
		longdest++;
	}
	dest[longdest] = '\0';
	return (dest);
}

100-atoi.c/     0           0     0     644     709       `
#include "main.h"

/**
 *_atoi - Entry point
 *@s: pointer to the string
 *Return: no return
 */
int _atoi(char *s)
{
	int i, j;
	int negativos;
	unsigned int entero;
	int auxiliar;

	i = 0;
	while (*(s + i) != '\0')
	{
		i++;
	}
	j = 0;
	auxiliar = 10;
	entero = 0;
	negativos = 0;
	while (j < i)
	{
		if (s[j] == '-')
			negativos = negativos + 1;
		if (s[j] >= '0' && s[j] <= '9')
		{
			if (s[j + 1] >= '0' && s[j + 1] <= '9')
			{
				entero = (s[j] - '0') + entero;
				entero = auxiliar * entero;
			}
			else
			{
				entero = (s[j] - '0') + entero;
			}
			if (s[j + 1] < '0' || s[j + 1] > '9')
				break;
		}
		j++;
	}
	if (negativos % 2 != 0)
		return ((entero) * -1);
		else
			return (entero);
}

2-strchr.c/     0           0     0     644     372       `
#include "main.h"
#include <stdio.h>
/**
 * _strchr - points to the first occurance of a character
 *
 * @s: string to check
 * @c: character to point
 *
 * Return: s pointed to c character
 */
char *_strchr(char *s, char c)
{
int len = 0;

while (*(s + len) != '\0')
{
if (*(s + len) == c)
return ((s + len));
len++;
}
if (c == '\0')
return ((s + len));
return (NULL);
}
2-strlen.c/     0           0     0     644     258       `
#include "main.h"

/**
 * _strlen - calculate the length of a string
 * @s: the string to calculate the length of
 *
 * Return: the length of the string
 */
int _strlen(char *s)
{
	int len = 0;

	if (s)
	{
		while (*(s + len))
			++len;
	}

	return (len);
}
2-strncpy.c/    0           0     0     644     414       `
#include "main.h"

/**
 *_strncpy - concatenates two strings
 *@dest: pointer for the first string we want to change
 *@src: pointer  for the second string
 *@n: number of bytes
 *
 *Return: the new string dest with n bytes new
 */
char *_strncpy(char *dest, char *src, int n)
{
	int j;

	for (j = 0; j < n && src[j] != '\0'; j++)
	{
		dest[j] = src[j];
	}
	for ( ; j < n; j++)
		dest[j] = '\0';
	return (dest);
}
3-islower.c/    0           0     0     644     234       `
#include "main.h"

/**
 * _islower - checks for lowercase character.
 *@c: receipt character by main.
 * Return: 1 if c is lowercase
 */
int _islower(int c)
{
	if (c >= 'a' && c <= 'z')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
3-puts.c/       0           0     0     644     232       `
#include "main.h"
/**
 * _puts - prints a string, followed by a new line,
 * @str: pointer to the string to print
 * Return: void
*/


void _puts(char *str)
{
int i = 0;
while (str[i])
{
	_putchar(str[i]);
	i++;
}
_putchar('\n');
}
3-strcmp.c/     0           0     0     644     455       `
#include "main.h"

/**
 *_strcmp - compare two strings
 *@s1: pointer for the first string we want to compare
 *@s2: pointer for the second string we want to compare
 *
 *Return: and integer
 */
int _strcmp(char *s1, char *s2)
{
	int j;
	int entero;

	entero = 0;
	for (j = 0; s1[j] != '\0'; j++)
	{
		if (s1[j] - s2[j] != 0)
		{
			entero = s1[j] - s2[j];
			break;
		}
	}
	if (entero == 0 && s1[j] == '\0')
		entero = s1[j] - s2[j];
	return (entero);
}

3-strspn.c/     0           0     0     644     645       `
#include "main.h"

/**
 * _strspn - get length of a prefix substring
 * @s: the string to search
 * @accept: the characters to allow in the substring
 *
 * Description: calculates the length (in bytes) of the initial segment of s
 * which consists entirely of bytes in accept.
 *
 * Return: number of bytes in the initial segment of s which consist only of
 * bytes fron accept.
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int i;
	char *accept_pos;

	for (i = 0; s[i]; ++i)
	{
		for (accept_pos = accept; *accept_pos; ++accept_pos)
		{
			if (s[i]  == *accept_pos)
				break;
		}
		if (!*accept_pos)
			break;
	}

	return (i);
}

4-isalpha.c/    0           0     0     644     245       `
#include "main.h"

/**
 * _isalpha - checks letter
 * @c: receipt character by main.
 * Return: 1 if c is lowercase
 */
int _isalpha(int c)
{
	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

4-strpbrk.c/    0           0     0     644     684       `
#include "main.h"
#include <stdlib.h>
/**
  *_strpbrk - seraches a string for any of a set of bytes.
  *it locates the first occurence in the string s of any of
  *the bytes in the string accept.
  *@s: pointer to string.
  *@accept: pointer to strin to be matched.
  *
  *Return: pointer to byte in s that matches one of the bytes
  *in accept ot NULL if no such byte is found.
  */
char *_strpbrk(char *s, char *accept)
{
	char *p;
	int counter, counter2;

	p = 0;

	for (counter = 0; s[counter] != '\0'; counter++)
	{
		for (counter2 = 0; accept[counter2]; counter2++)
		{
			if (accept[counter2] == s[counter])
			{
				p = &s[counter];
				return (p);
			}
		}
	}
	return (p);
}
5-strstr.c/     0           0     0     644     598       `
#include "main.h"
/**
  *_strstr - locates a substring.
  *finds first occurence of the substring needle in
  *haystack.
  *@haystack: pointer to string.
  *@needle: pointer to substring.
  *
  *Return: pointer to beginning of located string
  *or NULL if substring isnt located.
  */
char *_strstr(char *haystack, char *needle)
{
	while (*haystack)
	{
		char *start = haystack;
		char *needlestr = needle;

		while (*needlestr && *haystack && *haystack == *needlestr)
		{
			haystack++;
			needlestr++;
		}

		if (!*needlestr)
		{
			return (start);
		}

		haystack = start + 1;
	}
	return (0);
}
6-abs.c/        0           0     0     644     220       `
#include "main.h"

/**
 * _abs - checks number
 * @r: integer receipt by main.
 * Return: Returns r when it is positive absolute value,
 */
int _abs(int r)
{
	if (r >= 0)
	{
		return (r);
	}
	else
	{
		return (-r);
	}
}
9-strcpy.c/     0           0     0     644     455       `
#include "main.h"

/**
 * _strcpy - copy a string (including the terminating null-byte)
 *
 * @dest: the buffer to which the string should be copied
 * @src: the string to copy
 *
 * Return: dest
 */
char *_strcpy(char *dest, char *src)
{
	int len = 0;
	int pos = 0;

	if (dest && src)
	{
		while (*(src + len))
			++len;

		if (src + len < dest || dest + len < src)
		{
			do {
				*(dest + pos++) = *src++;
			} while (len--);
		}
	}

	return (dest);
}

_putchar.c/     0           0     0     644     265       `
#include "main.h"
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

